package main

import (
	"database/sql"
	"fmt"
	"net/http"
	"strconv"

	_ "github.com/lib/pq"
)

var db *sql.DB

func init() {
	var err error
	db, err = sql.Open("postgres", "postgres://zztop:rock@localhost/educate?sslmode=disable")
	if err != nil {
		panic(err)
	}

	err = db.Ping()
	if err != nil {
		panic(err)
	}
	fmt.Println("You are connected")
}

type Student struct {
	id            int
	school_id     int
	district_name string
	school_name   string
	first_name    string
	last_name     string
	identifier    string
}

func main() {

	//defer db.Close()

	http.HandleFunc("/students", studentsIndex)
	http.HandleFunc("/student", studentIndex)
	http.HandleFunc("student/create", studentCreateProcess)
	http.HandleFunc("/student/update", studentUpdateProcess)
	http.HandleFunc("/student/delete", studentDeleteProcess)
	http.ListenAndServe(":8080", nil)
}

func studentsIndex(w http.ResponseWriter, r *http.Request) {
	if r.Method != "GET" {
		http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
		return
	}

	rows, err := db.Query("SELECT d.name AS district_name, sch.name AS school_name, stu.first_name, stu.last_name, stu.identifier FROM students stu, schools sch, districts d " +
		"WHERE stu.school_id = sch.id AND d.id = sch.district_id;")
	if err != nil {
		http.Error(w, http.StatusText(500), 500)
		return
	}
	defer rows.Close()

	students := make([]Student, 0)
	for rows.Next() {
		st := Student{}
		err := rows.Scan(&st.district_name, &st.school_name, &st.first_name, &st.last_name, &st.identifier)
		if err != nil {
			http.Error(w, http.StatusText(500), 500)
			return
		}
		students = append(students, st)
	}
	if err = rows.Err(); err != nil {
		http.Error(w, http.StatusText(500), 500)
		return
	}
	for _, st := range students {
		fmt.Fprintf(w, "%s, %s, %s, %s, %s\n", st.district_name, st.school_name, st.first_name, st.last_name, st.identifier)
	}
}

func studentIndex(w http.ResponseWriter, r *http.Request) {
	if r.Method != "GET" {
		http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
		return
	}

	identifier := r.FormValue("identifier")

	if identifier == "" {
		http.Error(w, http.StatusText(400), http.StatusBadRequest)
		return
	}

	row := db.QueryRow("SELECT d.name AS district_name, sch.name AS school_name, stu.first_name, stu.last_name, stu.identifier FROM students stu, schools sch, districts d "+
		"WHERE stu.school_id = sch.id AND d.id = sch.district_id AND stu.identifier = $1", identifier)
	st := Student{}
	err := row.Scan(&st.district_name, &st.school_name, &st.first_name, &st.last_name, &st.identifier)
	switch {
	case err == sql.ErrNoRows:
		http.NotFound(w, r)
		return
	case err != nil:
		http.Error(w, http.StatusText(500), http.StatusInternalServerError)
		return
	}

	fmt.Fprintf(w, "%s, %s, %s, %s, %s\n", st.district_name, st.school_name, st.first_name, st.last_name, st.identifier)
}

func studentCreateProcess(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
		return
	}

	st := Student{}
	strSchoolId := r.FormValue("school_id")
	st.first_name = r.FormValue("first_name")
	st.last_name = r.FormValue("last_name")
	st.identifier = r.FormValue("identifier")

	if strSchoolId == "" || st.first_name == "" || st.last_name == "" || st.identifier == "" {
		http.Error(w, http.StatusText(400), http.StatusBadRequest)
		return
	}

	i, err := strconv.Atoi(strSchoolId)
	if err != nil {
		http.Error(w, http.StatusText(http.StatusNotAcceptable)+"school_id must be an integer value", http.StatusNotAcceptable)
		return
	}
	st.school_id = i

	_, err = db.Exec("INSERT INTO students (school_id, first_name, last_name, identifier) VALUES ($1, $2, $3, $4)",
		st.school_id, st.first_name, st.last_name, st.identifier)
	if err != nil {
		http.Error(w, http.StatusText(500), http.StatusInternalServerError)
		return
	}

	fmt.Fprintf(w, "%s, %s, %s, %s\n", strSchoolId, st.first_name, st.last_name, st.identifier)
}

func studentUpdateProcess(w http.ResponseWriter, r *http.Request) {
	if r.Method != "GET" {
		http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
		return
	}

	st := Student{}
	strId := r.FormValue("id")
	strSchoolId := r.FormValue("school_id")
	st.first_name = r.FormValue("first_name")
	st.last_name = r.FormValue("last_name")
	st.identifier = r.FormValue("identifier")

	if strId == "" || strSchoolId == "" || st.first_name == "" || st.last_name == "" || st.identifier == "" {
		http.Error(w, http.StatusText(400), http.StatusBadRequest)
		return
	}

	i, err := strconv.Atoi(strSchoolId)
	if err != nil {
		http.Error(w, http.StatusText(http.StatusNotAcceptable)+"school_id must be an integer value", http.StatusNotAcceptable)
		return
	}
	st.school_id = i

	id, err := strconv.Atoi(strId)
	if err != nil {
		http.Error(w, http.StatusText(http.StatusNotAcceptable)+"id must be an integer value", http.StatusNotAcceptable)
		return
	}
	st.id = id

	_, err = db.Exec("UPDATE students SET school_id = $2, first_name = $3, last_name = $4, identifier = $5 WHERE id = $1; ",
		st.id, st.school_id, st.first_name, st.last_name, st.identifier)
	if err != nil {
		http.Error(w, http.StatusText(500), http.StatusInternalServerError)
		return
	}
	fmt.Fprintf(w, "%s, %s, %s, %s, %s\n", strId, strSchoolId, st.first_name, st.last_name, st.identifier)

}

func studentDeleteProcess(w http.ResponseWriter, r *http.Request) {
	if r.Method != "GET" {
		http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
		return
	}

	strId := r.FormValue("id")

	if strId == "" {
		http.Error(w, http.StatusText(400), http.StatusBadRequest)
		return
	}

	id, err := strconv.Atoi(strId)
	if err != nil {
		http.Error(w, http.StatusText(http.StatusNotAcceptable)+"id must be an integer value", http.StatusNotAcceptable)
		return
	}

	_, err = db.Exec("DELETE FROM students WHERE id = $1; ",
		id)
	if err != nil {
		http.Error(w, http.StatusText(500), http.StatusInternalServerError)
		return
	}
	fmt.Fprintf(w, "%s\n", strId)

}
