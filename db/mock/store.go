// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/irossa/educate/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/irossa/educate/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateDistrict mocks base method.
func (m *MockStore) CreateDistrict(arg0 context.Context, arg1 string) (db.District, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistrict", arg0, arg1)
	ret0, _ := ret[0].(db.District)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDistrict indicates an expected call of CreateDistrict.
func (mr *MockStoreMockRecorder) CreateDistrict(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistrict", reflect.TypeOf((*MockStore)(nil).CreateDistrict), arg0, arg1)
}

// CreateSchool mocks base method.
func (m *MockStore) CreateSchool(arg0 context.Context, arg1 db.CreateSchoolParams) (db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchool", arg0, arg1)
	ret0, _ := ret[0].(db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchool indicates an expected call of CreateSchool.
func (mr *MockStoreMockRecorder) CreateSchool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchool", reflect.TypeOf((*MockStore)(nil).CreateSchool), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteDistrict mocks base method.
func (m *MockStore) DeleteDistrict(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDistrict", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDistrict indicates an expected call of DeleteDistrict.
func (mr *MockStoreMockRecorder) DeleteDistrict(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDistrict", reflect.TypeOf((*MockStore)(nil).DeleteDistrict), arg0, arg1)
}

// DeleteSchool mocks base method.
func (m *MockStore) DeleteSchool(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchool indicates an expected call of DeleteSchool.
func (mr *MockStoreMockRecorder) DeleteSchool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchool", reflect.TypeOf((*MockStore)(nil).DeleteSchool), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetAllDistricts mocks base method.
func (m *MockStore) GetAllDistricts(arg0 context.Context, arg1 db.GetAllDistrictsParams) ([]db.District, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDistricts", arg0, arg1)
	ret0, _ := ret[0].([]db.District)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDistricts indicates an expected call of GetAllDistricts.
func (mr *MockStoreMockRecorder) GetAllDistricts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDistricts", reflect.TypeOf((*MockStore)(nil).GetAllDistricts), arg0, arg1)
}

// GetAllSchools mocks base method.
func (m *MockStore) GetAllSchools(arg0 context.Context, arg1 db.GetAllSchoolsParams) ([]db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSchools", arg0, arg1)
	ret0, _ := ret[0].([]db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSchools indicates an expected call of GetAllSchools.
func (mr *MockStoreMockRecorder) GetAllSchools(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSchools", reflect.TypeOf((*MockStore)(nil).GetAllSchools), arg0, arg1)
}

// GetAllUsers mocks base method.
func (m *MockStore) GetAllUsers(arg0 context.Context, arg1 db.GetAllUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockStoreMockRecorder) GetAllUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockStore)(nil).GetAllUsers), arg0, arg1)
}

// GetDistrict mocks base method.
func (m *MockStore) GetDistrict(arg0 context.Context, arg1 int64) (db.District, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistrict", arg0, arg1)
	ret0, _ := ret[0].(db.District)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistrict indicates an expected call of GetDistrict.
func (mr *MockStoreMockRecorder) GetDistrict(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistrict", reflect.TypeOf((*MockStore)(nil).GetDistrict), arg0, arg1)
}

// GetSchool mocks base method.
func (m *MockStore) GetSchool(arg0 context.Context, arg1 int64) (db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchool", arg0, arg1)
	ret0, _ := ret[0].(db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchool indicates an expected call of GetSchool.
func (mr *MockStoreMockRecorder) GetSchool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchool", reflect.TypeOf((*MockStore)(nil).GetSchool), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 db.TransferTxParams) (db.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(db.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}

// UpdateDistrict mocks base method.
func (m *MockStore) UpdateDistrict(arg0 context.Context, arg1 db.UpdateDistrictParams) (db.District, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDistrict", arg0, arg1)
	ret0, _ := ret[0].(db.District)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDistrict indicates an expected call of UpdateDistrict.
func (mr *MockStoreMockRecorder) UpdateDistrict(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDistrict", reflect.TypeOf((*MockStore)(nil).UpdateDistrict), arg0, arg1)
}

// UpdateSchool mocks base method.
func (m *MockStore) UpdateSchool(arg0 context.Context, arg1 db.UpdateSchoolParams) (db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchool", arg0, arg1)
	ret0, _ := ret[0].(db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchool indicates an expected call of UpdateSchool.
func (mr *MockStoreMockRecorder) UpdateSchool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchool", reflect.TypeOf((*MockStore)(nil).UpdateSchool), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
