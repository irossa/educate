// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: school.sql

package db

import (
	"context"
	"database/sql"
)

const createSchool = `-- name: CreateSchool :one
INSERT INTO school (
    name, district_id
) VALUES (
    $1, $2
) RETURNING id, district_id, name, created_at
`

type CreateSchoolParams struct {
	Name       string        `json:"name"`
	DistrictID sql.NullInt64 `json:"districtID"`
}

func (q *Queries) CreateSchool(ctx context.Context, arg CreateSchoolParams) (School, error) {
	row := q.db.QueryRowContext(ctx, createSchool, arg.Name, arg.DistrictID)
	var i School
	err := row.Scan(
		&i.ID,
		&i.DistrictID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSchool = `-- name: DeleteSchool :exec
DELETE FROM school
WHERE id = $1
`

func (q *Queries) DeleteSchool(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSchool, id)
	return err
}

const getAllSchools = `-- name: GetAllSchools :many
SELECT id, district_id, name, created_at FROM school
ORDER BY name
LIMIT $1
OFFSET $2
`

type GetAllSchoolsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllSchools(ctx context.Context, arg GetAllSchoolsParams) ([]School, error) {
	rows, err := q.db.QueryContext(ctx, getAllSchools, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []School{}
	for rows.Next() {
		var i School
		if err := rows.Scan(
			&i.ID,
			&i.DistrictID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchool = `-- name: GetSchool :one
SELECT id, district_id, name, created_at FROM school
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSchool(ctx context.Context, id int64) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchool, id)
	var i School
	err := row.Scan(
		&i.ID,
		&i.DistrictID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const updateSchool = `-- name: UpdateSchool :one
UPDATE school
SET name = $2,
    district_id = $3
WHERE id = $1
RETURNING id, district_id, name, created_at
`

type UpdateSchoolParams struct {
	ID         int64         `json:"id"`
	Name       string        `json:"name"`
	DistrictID sql.NullInt64 `json:"districtID"`
}

func (q *Queries) UpdateSchool(ctx context.Context, arg UpdateSchoolParams) (School, error) {
	row := q.db.QueryRowContext(ctx, updateSchool, arg.ID, arg.Name, arg.DistrictID)
	var i School
	err := row.Scan(
		&i.ID,
		&i.DistrictID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}
