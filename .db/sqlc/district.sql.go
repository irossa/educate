// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: district.sql

package db

import (
	"context"
)

const createDistrict = `-- name: CreateDistrict :one
INSERT INTO district (
    name
) VALUES (
    $1
) RETURNING id, name, created_at
`

func (q *Queries) CreateDistrict(ctx context.Context, name string) (District, error) {
	row := q.db.QueryRowContext(ctx, createDistrict, name)
	var i District
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteDistrict = `-- name: DeleteDistrict :exec
DELETE FROM district
WHERE id = $1
`

func (q *Queries) DeleteDistrict(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDistrict, id)
	return err
}

const getAllDistricts = `-- name: GetAllDistricts :many
SELECT id, name, created_at FROM district
ORDER BY name
LIMIT $1
OFFSET $2
`

type GetAllDistrictsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllDistricts(ctx context.Context, arg GetAllDistrictsParams) ([]District, error) {
	rows, err := q.db.QueryContext(ctx, getAllDistricts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []District
	for rows.Next() {
		var i District
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDistrict = `-- name: GetDistrict :one
SELECT id, name, created_at FROM district
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDistrict(ctx context.Context, id int64) (District, error) {
	row := q.db.QueryRowContext(ctx, getDistrict, id)
	var i District
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const updateDistrict = `-- name: UpdateDistrict :one
UPDATE district
SET name = $2
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateDistrictParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateDistrict(ctx context.Context, arg UpdateDistrictParams) (District, error) {
	row := q.db.QueryRowContext(ctx, updateDistrict, arg.ID, arg.Name)
	var i District
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
